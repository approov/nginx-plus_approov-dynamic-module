# APPROOV REQUIRED
lua_package_path "/etc/nginx/modules/?.lua;;/etc/nginx/modules/approov/?.lua;;";

# REMOVE FOR PRODUCTION
#lua_code_cache off;

upstream apibackend {
    server approov-backend:5000;
}

server {
    #listen      80;
    #listen      443 ssl;

    # For testing the Approov integration we will be listening in alternative ports, so that we can run alongside an
    #  existing Nginx Plus server(staging, testing), that is already listening in port 80 and 443, thus allowing to
    #  reuse the SSL certificates for the domain associated with ports 80 and 443.
    listen      8001; # alternative to port 80
    listen      8002 ssl; # alternative to port 443

    root        /usr/share/nginx/html;

    # Docker DNS resolver
    # @link https://docs.docker.com/v17.09/engine/userguide/networking/configure-dns/
    resolver 127.0.0.11;

    # SSL CERTIFICATES
    #
    # @link https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/
    # @link https://gist.github.com/nginx-gists/7879b97e29b3d23fc72daef5591af74c#file-dynamic_certs-conf
    #
    # Once we are listening in port 8001 for http and 8002 for https we can reuse the certificates of the current server
    #  without needing to obtain new certificates.
    #
    # Adjust the path to your certificate as needed.
    ssl_certificate           /etc/letsencrypt/live/$ssl_server_name/fullchain.pem;
    ssl_certificate_key       /etc/letsencrypt/live/$ssl_server_name/privkey.pem;
    ssl_protocols             TLSv1.3 TLSv1.2 TLSv1.1;
    ssl_prefer_server_ciphers on;

    # Redirect non-https traffic to https
    if ($scheme != "https") {
        #return 301 https://$host$request_uri;
        return 301 https://$host:8002$request_uri;
    }

    location / {
        try_files $uri $uri/ =404;
    }

    # Protecting requests for static documents with an Approov Token check.
    location ~ \.(pdf|doc|xslx) {
        auth_jwt   "APPROOV" token=$http_Approov_Token;
        auth_jwt_key_file approov-secret.jwk;
    }

    # Group all endpoints for `/api` under the same location block.
    location /api {

        error_log /var/log/nginx/api.error.log debug;

        # Exact match for the root of `/api`, that allows the request to proceed without any Approov Token check.
        location = /api {
            proxy_pass http://apibackend;
        }

        # Exact match for an API endpoint protected with the optional Approov Token binding check.
        location = /api/approov-token-binding-protected {
            auth_jwt   "APPROOV" token=$http_Approov_Token;
            auth_jwt_key_file approov-secret.jwk;

            access_by_lua '
                local approov = require("token-binding-check")
                approov.checkTokenBinding(ngx.var.jwt_claim_pay, ngx.var.http_Authorization)
            ';

            proxy_pass http://apibackend;
        }

        # All remaining API endpoints are protected with an Approov Token check.
        # location /api {
        #     auth_jwt   "APPROOV" token=$http_Approov_Token;
        #     auth_jwt_key_file approov-secret.jwk;
        #     proxy_pass http://apibackend;
        # }

        # All API endpoints for `/api/v2/*` are protected with an Approov Token check.
        location /api {

            # ADD THIS TWO LINES:
            auth_jwt   "APPROOV" token=$http_Approov_Token;
            auth_jwt_key_file approov-secret.jwk;

            proxy_pass http://apibackend;
            # rest of your nginx configuration...
        }

        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 @header_only;
    }

    location @header_only {
        # https://www.cyberciti.biz/faq/how-to-override-content-type-with-nginx-web-server/
        types { } default_type "application/json; charset=utf-8";

        # the status codes `400` is not honoured, but the the json response `{}` is returned as expected.
        return 400 '{}';
    }

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
